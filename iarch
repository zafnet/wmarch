#!/usr/bin/env bash
MIRRORLISTLIVE='/etc/pacman.d/mirrorlist'
PACSTRAP='base man-db base-devel xz linux-lts linux-firmware linux-headers util-linux tar systemd-sysvcompat systemd shadow psmisc mkinitcpio procps-ng pciutils licenses iputils iproute2 glibc gcc-libs filesystem coreutils bzip2 bash reflector python rsync'

# Funciones De Colores
print_live() {
    echo -e "\033[1;92m$1\033[0m"
}

print_disco() {
    echo -e "\033[1;93m$1\033[0m"
}

print_clone() {
    echo -e "\033[1;95m$1\033[0m"
}

separador() {
sleep 3
clear
}


# Comprobar conexión a Internet y si se ejecuta como root
comprobar_internet() {
    if [ "$(id -u)" -ne 0 ]; then
        echo "Este script debe ejecutarse como root."
        exit 1
    fi
    # Comprobar conexión a Internet
    if ! ping -c 1 -q www.google.com &> /dev/null; then
print_live "██╗      █████╗      ██████╗ ██████╗ ███╗   ██╗███████╗██╗  ██╗██╗ ██████╗ ███╗   ██╗";
print_live "██║     ██╔══██╗    ██╔════╝██╔═══██╗████╗  ██║██╔════╝╚██╗██╔╝██║██╔═══██╗████╗  ██║";
print_live "██║     ███████║    ██║     ██║   ██║██╔██╗ ██║█████╗   ╚███╔╝ ██║██║   ██║██╔██╗ ██║";
print_live "██║     ██╔══██║    ██║     ██║   ██║██║╚██╗██║██╔══╝   ██╔██╗ ██║██║   ██║██║╚██╗██║";
print_live "███████╗██║  ██║    ╚██████╗╚██████╔╝██║ ╚████║███████╗██╔╝ ██╗██║╚██████╔╝██║ ╚████║";
print_live "╚══════╝╚═╝  ╚═╝     ╚═════╝ ╚═════╝ ╚═╝  ╚═══╝╚══════╝╚═╝  ╚═╝╚═╝ ╚═════╝ ╚═╝  ╚═══╝";
print_live "                                                                                     ";
print_live "███████╗ █████╗ ██╗     ██╗      ██████╗ ";
print_live "██╔════╝██╔══██╗██║     ██║     ██╔═══██╗";
print_live "█████╗  ███████║██║     ██║     ██║   ██║";
print_live "██╔══╝  ██╔══██║██║     ██║     ██║   ██║";
print_live "██║     ██║  ██║███████╗███████╗╚██████╔╝";
print_live "╚═╝     ╚═╝  ╚═╝╚══════╝╚══════╝ ╚═════╝ ";
        exit 1
    fi
}

# Ver Discos disponibles
disco_fisico_disponible(){
discosdisponibles=$(echo "print devices" | parted | grep /dev/ | awk '{if (NR!=1) {print}}' | sed '/sr/d')
separador
print_disco "SELECCIONAR EL DISCO PARA INSTALAR ARCH LINUX"
print_disco "por ejemplo, /dev/sda /dev/vda /dev/nvme00ca etc"
echo ""
print_live "$discosdisponibles"
echo ""
read -e -p "Disco para instalar Arch Linux: " disco
separador
}

# Solicitar datos al usuario
datos_usuario() {
  # Solicitar datos al usuario
    print_live "INGRESAR DATOS DE USUARIO"
    read -p "Introduce Nombre usuario: " user
    read -s -p "Introduce la clave de $user: " userpasswd
    echo ""
    read -s -p "Introduce la clave de Root/Administrador: " rootpasswd
}

# Selección de escritorio
elegir_escritorio() {
print_live "ESCRITORIOS"
echo ""
printf '%*s\n' "${COLUMNS:-$(tput cols)}" '' | tr ' ' _
print_live "Ingresa una opción marcando el número correcto:"
echo "1. Terminal Virtual (TTY)"
echo "2. bspwm"
echo "3. Xfce4"
echo "4. Kde Plasma"
echo "5. Gnome 40"
echo "6. I3"
echo "7. hyprland"
echo "8. dwm"
read -p "Introduce la opción de Escritorio: " escritorio
echo ""
}

escritorio_elegido() {
print_disco "ESCRITORIO SELECCIONADO"
case $escritorio in
  1) 
    echo "Escritorio : Terminal Virtual (TTY)"
    sleep 3
    clear
    packages=(
        "zsh zsh-completions zsh-syntax-highlighting zsh-autosuggestions xorg xorg-apps xorg-xinit xorg-twm xterm xorg-xclock bat vifm fzf tmux xclip lsd pacman-contrib"
    )
    ;;
  2) 
    echo "Escritorio : Bspwm"
    sleep 3
    clear
    packages=(
        "firefox zsh-completions zsh-syntax-highlighting zsh-autosuggestions flameshot obsidian neovim bat vifm fzf tmux xclip file-roller lsd rofi bspwm sxhkd gvfs picom xorg xorg-apps xorg-xinit xorg-twm xterm xorg-xclock i3lock xed android-file-transfer android-tools android-udev feh pacman-contrib gvfs-gphoto2 gvfs-mtp mtpfs libnotify dunst pulseaudio pcmanfm lxappearance zathura zathura-pdf-poppler imagemagick"
    )
    ;;
  3) 
    echo "Escritorio : Xfce4"
    sleep 3
    packages=(
        "firefox xorg xorg-twm xorg-apps xorg-xinit xterm xorg-xclock lightdm lightdm-gtk-greeter lightdm-gtk-greeter-settings accountsservice light-locker tmux xfce4 xfce4-goodies flameshot network-manager-applet ffmpegthumbnailer ffmpegthumbs" 
    )
    arch-chroot /mnt /bin/bash -c "systemctl enable lightdm"
    ;;
  4) 
    echo "Escritorio : Kde Plasma"
    sleep 3
    packages=(
        "xorg xorg-apps xorg-xinit xorg-twm xterm xorg-xclock plasma dolphin konsole discover sddm ffmpegthumbs ffmpegthumbnailer"
    )
    arch-chroot /mnt /bin/bash -c "systemctl enable sddm"
    ;;
  5) 
    echo "Escritorio : Gnome 40"
    sleep 3
    packages=(
        "firefox xorg xorg-apps xorg-xinit xterm xorg-xclock gnome-font-viewer gnome-terminal gnome-shell gdm gnome-control-center gnome-tweaks pavucontrol ttf-hack ttf-inconsolata nautilus"
    )
    arch-chroot /mnt /bin/bash -c "systemctl enable gdm"
    ;;
  6) 
    echo -e '\033[0;34m' "Escritorio : I3"
    sleep 3
    packages=(
        "firefox i3-gaps i3-wm i3blocks i3lock zsh-completions zsh-syntax-highlighting zsh-autosuggestions imagemagick pulseaudio flameshot xorg xorg-apps xorg-xinit xorg-twm xterm xorg-xclock bat vifm fzf tmux xclip file-roller dunst lsd rofi gvfs picom pcmanfm lxappearance zathura zathura-pdf-poppler i3lock xed feh pacman-contrib"
    )
    ;;
  7) 
    echo -e '\033[0;34m' "Escritorio : hyprland"
    sleep 3
    packages=(
        "firefox slurp wezterm waybar obsidian neovim man-db git hyprland swaybg zsh-completions zsh-syntax-highlighting zsh-autosuggestions pulseaudio ghostty foot wl-clipboard wf-recorder grim mpv discord wayland wlroots xorg-xwayland bat vifm rofi fzf tmux xclip file-roller lsd gvfs zathura zathura-pdf-poppler xed feh pacman-contrib imagemagick libnotify fd dunst"
# nwg-look
    )
    ;;
  8) 
    echo "Escritorio : dwm"
    sleep 3
    clear
    packages=(
        "firefox zsh-completions git zsh-syntax-highlighting zsh-autosuggestions flameshot obsidian neovim bat vifm fzf tmux xclip file-roller lsd rofi gvfs picom xorg xorg-apps xorg-xinit xorg-twm xorg-server libxft libxinerama libx11 xterm xorg-xclock i3lock xed android-file-transfer android-tools android-udev feh pacman-contrib gvfs-gphoto2 gvfs-mtp mtpfs libnotify dunst pulseaudio pcmanfm scrot lxappearance zathura zathura-pdf-poppler imagemagick"
    )
    ;;
  *) 
    echo "¡Incorrecto! por defecto se instalará Terminal Virtual (TTY)"
    packages=(
        "zsh zsh-completions zsh-syntax-highlighting zsh-autosuggestions"
        "xorg xorg-apps xorg-xinit xorg-twm xterm xorg-xclock"
        "bat vifm fzf tmux xclip lsd pacman-contrib"
    )
    ;;
esac

# Instalación de paquetes
for package in "${packages[@]}"; do
    print_disco "INSTALANDO $package"
    arch-chroot /mnt /bin/bash -c "pacman -S --needed --noconfirm $package"
done
clear
}

# Configurar mirrors
mirrors_live() {
   # echo "Inicializando claves..."
   # pacman-key --init
   # pacman-key --populate archlinux
   # pacman-key --refresh-keys
    print_live "ACTUALIZACION DE LLAVES DEL LIVE CD"
    pacman -Sy --noconfirm archlinux-keyring reflector python rsync glibc curl
    separador
   # print_live "CONFIGURANDO DESCARGAS SIMULTANEAS EN /etc/pacman.conf"
    sed -i 's/#ParallelDownloads = 5/ParallelDownloads = 16/g' /etc/pacman.conf
   # separador
    print_live "ACTUALIZANDO MIRRORLIST MAS RAPIDOS PARA EL LIVE CD"
    reflector --verbose --latest 5 --protocol http --protocol https --sort rate --save "$MIRRORLISTLIVE"
    separador
   # print_live "NUEVA MIRRORLIST CONFIGURADA:"
   # cat /etc/pacman.d/mirrorlist
   # separador
}

# Configurar idioma del Live CD
idioma_live() {
    print_live "CONFIGURANDO IDIOMA DEL LIVE CD"
    echo "es_AR.UTF-8 UTF-8" > /etc/locale.gen
    locale-gen
    echo "LANG=es_AR.UTF-8" > /etc/locale.conf
    export LANG=es_AR.UTF-8
    separador
    print_live "MAPA DE TECLADO PARA LA TERMINAL VIRTUAL DEL LIVE CD"
    echo "KEYMAP=es" > /etc/vconsole.conf
    separador
}

# Configurar idioma del sistema instalado
idioma_fisico() {
    print_disco "CONFIGURANDO IDIOMA DEL MNT"
    echo "es_AR.UTF-8 UTF-8" > /mnt/etc/locale.gen
    arch-chroot /mnt /bin/bash -c "locale-gen"
    echo "LANG=es_AR.UTF-8" > /mnt/etc/locale.conf
    separador
    print_disco "MAPA DE TECLADO PARA LA TERMINAL VIRTUAL DE MNT"
    echo "KEYMAP=es" > /mnt/etc/vconsole.conf
    separador
}

# Configurar mirrors en el disco físico
mirrors_disco() {
    print_disco "ACTUALIZANDO LISTA DE MIRRORS EN MNT"
    arch-chroot /mnt /bin/bash -c "reflector --verbose --latest 5 --protocol http --protocol https --sort rate --save /etc/pacman.d/mirrorlist"
    separador
    print_disco "AGREGANDO OPCIONES EN PACMAN.CONF"
    sed -i 's/#Color/Color/g' /mnt/etc/pacman.conf
    sed -i 's/#TotalDownload/TotalDownload/g' /mnt/etc/pacman.conf
    sed -i 's/#VerbosePkgLists/VerbosePkgLists/g' /mnt/etc/pacman.conf
    # sed -i "37i ILoveCandy" /mnt/etc/pacman.conf
    sed -i 's/#ParallelDownloads = 5/ParallelDownloads = 16/g' /mnt/etc/pacman.conf
    #sed -i '93s/#\[multilib\]/\[multilib\]/g' /mnt/etc/pacman.conf
    #sed -i "94s/#Include = \/etc\/pacman.d\/mirrorlist/Include = \/etc\/pacman.d\/mirrorlist/g" /mnt/etc/pacman.conf
    separador
}

# Instalar sistema base en disco físico
instalar_base() {
    print_disco "INSTALANDO SISTEMA BASE EN MNT"
    pacstrap /mnt $PACSTRAP --needed --noconfirm
    separador
    print_disco "CREANDO FSTAB UUID EN MNT"
    genfstab -U /mnt >> /mnt/etc/fstab
}

# Modo EFI: Crear y montar particiones
modo_efi() {
    separador
    echo ""
    print_disco "INSTALACIÓN EN MODO EFI EN MNT"
    sgdisk --zap-all ${disco}
    parted ${disco} mklabel gpt
    sgdisk ${disco} -n=1:0:+512M -t=1:ef00
    sgdisk ${disco} -n=2:0:0 -t=2:8304
    mkfs.fat -F32 "${disco}1"
    mkfs.ext4 "${disco}2"
    mount "${disco}2" /mnt
    mkdir -p /mnt/efi
    mount "${disco}1" /mnt/efi

   # Montar otros sistemas de archivos necesarios
   #mount -m -t proc /proc /mnt/proc
   #mount -m -t sysfs /sys /mnt/sys
   #mount -m --rbind /dev /mnt/dev
   #mount -m --rbind /run /mnt/run
   #mount -m --bind /tmp /mnt/tmp
   #mount --bind /var/chroot /var/chroot
    separador
}

# Modo BIOS: Crear y montar particiones
modo_bios() {
: << 'comment'
██████╗ ██╗ ██████╗ ███████╗
██╔══██╗██║██╔═══██╗██╔════╝
██████╔╝██║██║   ██║███████╗
██╔══██╗██║██║   ██║╚════██║
██████╔╝██║╚██████╔╝███████║
╚═════╝ ╚═╝ ╚═════╝ ╚══════╝
PARTICIONES -BOOT-ROOT-HOME
particion boot +100M
particion home
particion root +100%
comment
    print_disco "INSTALACIÓN EN MODO BIOS EN MNT"
    sgdisk --zap-all ${disco}
    sgdisk ${disco} -n=1:0:+512M -t=1:8304
    sgdisk ${disco} -n=2:0:0 -t=2:8200
    mkfs.ext4 "${disco}1"
    mkswap "${disco}2"
    swapon "${disco}2"
    mount "${disco}1" /mnt
    clear
    lsblk -l
    separador
    # Montar otros sistemas de archivos necesarios
   #mount -m -t proc /proc /mnt/proc
   #mount -m -t sysfs /sys /mnt/sys
   #mount -m --bind /dev /mnt/dev
   #mount -m --bind /run /mnt/run
   #mount -m --bind /tmp /mnt/tmp
    # mount --bind /var/chroot /var/chroot
}

# Instalar GRUB en modo EFI
instalar_grub_efi() {
    print_disco "INSTALANDO GRUB EN MODO EFI EN MNT"
    arch-chroot /mnt /bin/bash -c "pacman -S grub efibootmgr dosfstools --noconfirm --needed"
    print_disco 'Instalando EFI System >> bootx64.efi' 
    arch-chroot /mnt /bin/bash -c 'grub-install --target=x86_64-efi --efi-directory=/efi --removable' 
echo '' 
echo '' 
    print_disco 'Instalando UEFI System >> grubx64.efi' 
    arch-chroot /mnt /bin/bash -c 'grub-install --target=x86_64-efi --efi-directory=/efi --bootloader-id=Arch'
    separador
    print_disco "MODIFICANDO LINEAS EN ARCHIVO GRUB EN MNT"
    sed -i "6iGRUB_CMDLINE_LINUX_DEFAULT=\"loglevel=3\"" /mnt/etc/default/grub
    sed -i '7d' /mnt/etc/default/grub
    separador
    print_disco "CREANDO NUEVAS CONFIGS EN ARCHIVO GRUB EN MNT"
    arch-chroot /mnt /bin/bash -c "grub-mkconfig -o /boot/grub/grub.cfg"
    separador
    ls -l /mnt/efi/EFI 
    echo '' 
    separador
}

# Instalar GRUB en modo BIOS
instalar_grub_bios() {
    arch-chroot /mnt /bin/bash -c "pacman -S grub --noconfirm"
    print_disco "INSTALANDO GRUB EN MODO BIOS EN MNT" 
    arch-chroot /mnt /bin/bash -c "grub-install --target=i386-pc ${disco}"
    separador
    print_disco "MODIFICANDO LINEAS EN ARCHIVO GRUB EN MNT"
    sed -i "6iGRUB_CMDLINE_LINUX_DEFAULT="loglevel=3"" /mnt/etc/default/grub
    sed -i '7d' /mnt/etc/default/grub
    separador
    print_disco "CREANDO NUEVAS CONFIGS EN ARCHIVO GRUB EN MNT"
    arch-chroot /mnt /bin/bash -c "grub-mkconfig -o /boot/grub/grub.cfg"
echo '' 
clear
ls -l /mnt/boot 
echo '' 
    separador
}

# Configurar hostname
configurar_hostname() {
    print_disco "HOSTNAME Y HOSTS"
    #read -p "Elija El Nombre De Hostname: " hos
    hos=lenox
    echo "$hos" > /mnt/etc/hostname
    echo "127.0.1.1 $hos.localdomain hos" >> /mnt/etc/hosts
    clear
    echo "Hostname: $(cat /mnt/etc/hostname)"
    echo ""
    echo "Hosts: $(cat /mnt/etc/hosts)"
    echo ""
    separador
}

# Configurar zona horaria
configurar_hora() {
   print_disco "ZONA HORARIA AUTOMATICA PARA MNT"
   zonahoraria="America/Argentina/Buenos_Aires"
   arch-chroot /mnt /bin/bash -c "ln -sf /usr/share/zoneinfo/$zonahoraria /etc/localtime"
   arch-chroot /mnt /bin/bash -c "timedatectl set-timezone $zonahoraria"
   arch-chroot /mnt /bin/bash -c "pacman -S ntp --needed --noconfirm"
   arch-chroot /mnt /bin/bash -c "ntpd -qg"
   arch-chroot /mnt /bin/bash -c "hwclock --systohc"
   clear
}

# Configurar usuario y contraseña
configurar_root() {
    print_disco "USUARIO ROOT Y CONTRASEÑA PARA MNT"
  # read -s -p "Introduzca la contraseña del usuario root: " rootpasswd
    arch-chroot /mnt /bin/bash -c "(echo $rootpasswd; echo $rootpasswd) | passwd root"
    arch-chroot /mnt /bin/bash -c "(echo $rootpasswd ; echo $rootpasswd) | passwd root"
    arch-chroot /mnt /bin/bash -c "useradd -mU -s /bin/zsh $user"
    arch-chroot /mnt /bin/bash -c "(echo $userpasswd ; echo $userpasswd) | passwd $user"
    sed -i "80i $user ALL=(ALL) ALL"  /mnt/etc/sudoers
    clear

}

# Configurar red
configurar_red() {
     print_disco "INSTALANDO PROGRAMAS PARA ETHERNET PARA MNT"
     arch-chroot /mnt /bin/bash -c "pacman -S dhcpcd networkmanager net-tools ifplugd --noconfirm"
     #arch-chroot /mnt /bin/bash -c "pacman -S dhcpcd networkmanager iwd net-tools ifplugd --noconfirm"
     arch-chroot /mnt /bin/bash -c "systemctl enable dhcpcd NetworkManager"
     echo "noipv6rs" >> /mnt/etc/dhcpcd.conf
     echo "noipv6" >> /mnt/etc/dhcpcd.conf
     clear
     # Wifi
     #print_disco "INSTALANDO PROGRAMAS PARA WIFI"
     #arch-chroot /mnt /bin/bash -c "pacman -S iw wireless_tools wpa_supplicant dialog wireless-regdb --noconfirm"
     #clear
     # bluetooth
     #print_disco "INSTALANDO PROGRAMAS PARA BLUETOOTH"
     #arch-chroot /mnt /bin/bash -c "pacman -S bluez bluez-utils pulseaudio-bluetooth"
}

# Shell del sistema
terminal_usar(){
print_disco "SHELL ZSH PARA USUARIO Y ROOT"
SH=zsh
arch-chroot /mnt /bin/bash -c "chsh -s /bin/$SH"
arch-chroot /mnt /bin/bash -c "chsh -s /usr/bin/$SH root"
arch-chroot /mnt /bin/bash -c "chsh -s /bin/$SH $user"
clear
}

# Driver de Vídeo automatico solo driver Libres
driver_video_auto() {
print_disco "DRIVER DE VIDEO AUTOMATICO SOLO DRIVER LIBRES EN MNT"

print_disco "INSTALANDO DRIVER DE VIDEO NVIDIA"
if (lspci | grep VGA | grep "NVIDIA\|nVidia" &>/dev/null); then
#Nvidia
arch-chroot /mnt /bin/bash -c "pacman -S xf86-video-nouveau mesa lib32-mesa mesa-vdpau libva-mesa-driver lib32-mesa-vdpau lib32-libva-mesa-driver libva-vdpau-driver libvdpau-va-gl libva-utils vdpauinfo libvdpau lib32-libvdpau opencl-mesa clinfo ocl-icd lib32-ocl-icd opencl-headers --noconfirm"

print_disco "INSTALANDO DRIVER DE VIDEO RADEON"
elif (lspci | grep VGA | grep "Radeon R\|R2/R3/R4/R5" &>/dev/null); then
# Radeon  
arch-chroot /mnt /bin/bash -c "pacman -S xf86-video-amdgpu mesa lib32-mesa vulkan-radeon lib32-vulkan-radeon mesa-vdpau libva-mesa-driver lib32-mesa-vdpau lib32-libva-mesa-driver libva-vdpau-driver libvdpau-va-gl libva-utils vdpauinfo opencl-mesa clinfo ocl-icd lib32-ocl-icd opencl-headers --noconfirm"

print_disco "INSTALANDO DRIVER DE VIDEO ATI"
elif (lspci | grep VGA | grep "ATI\|AMD/ATI" &>/dev/null); then
# ATI             
arch-chroot /mnt /bin/bash -c "pacman -S xf86-video-ati mesa lib32-mesa mesa-vdpau libva-mesa-driver lib32-mesa-vdpau lib32-libva-mesa-driver libva-vdpau-driver libvdpau-va-gl libva-utils vdpauinfo opencl-mesa clinfo ocl-icd lib32-ocl-icd opencl-headers --noconfirm"

elif (lspci | grep VGA | grep "Intel" &>/dev/null); then
# Intel       
print_disco "INSTALANDO DRIVER DE VIDEO INTEL"
arch-chroot /mnt /bin/bash -c "pacman -S xf86-video-intel vulkan-intel mesa lib32-mesa intel-media-driver libva-intel-driver libva-vdpau-driver libvdpau-va-gl libva-utils vdpauinfo intel-compute-runtime beignet clinfo ocl-icd lib32-ocl-icd opencl-headers --noconfirm"
    
else
# Generico   
print_disco "INSTALANDO DRIVER DE VIDEO GENERICO"
arch-chroot /mnt /bin/bash -c "pacman -S xf86-video-vesa xf86-video-fbdev mesa mesa-libgl lib32-mesa --noconfirm"
fi
clear
}

clone_repo() {
print_clone "CLONANDO REPO EN HOME DE MNT"
arch-chroot /mnt /bin/bash -c "git clone -b hypr https://github.com/zafnet/wmarch /home/$user/wmarch"
    separador
print_clone "CAMBIANDO PERMISOS PARA REPO EN HOME DE MNT"
arch-chroot /mnt /bin/bash -c "chown -R $user:$user /home/$user/wmarch/"
    separador
print_clone "CAMBIANDO PERMISOS PARA DOTS HOME DE MNT"
arch-chroot /mnt /bin/bash -c "chmod 744 /home/$user/wmarch/dots"
    separador
}

# Instalación completa
instalacion_completa() {
    comprobar_internet
    mirrors_live
    idioma_live
    disco_fisico_disponible
    datos_usuario
    if [ -d /sys/firmware/efi ]; then
        modo_efi
        instalar_base
        mirrors_disco
        instalar_grub_efi
        terminal_usar
        driver_video_auto
        elegir_escritorio
        escritorio_elegido
        clone_repo
    else
        modo_bios
        instalar_base
        mirrors_disco
        instalar_grub_bios
        terminal_usar
        driver_video_auto
        elegir_escritorio
        escritorio_elegido
        clone_repo
    fi
    idioma_fisico
    configurar_hostname
    configurar_hora
    configurar_root
    configurar_red
    print_live "INSTALACIÓN COMPLETA"
}

instalacion_completa
