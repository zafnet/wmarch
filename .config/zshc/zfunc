# FUNCIONES PARA FZF

# Menu de fzf con Funciones de .zshrc
_switch_menu() {
  case "$1" in
    alt-i) ir ;;    # ir a un directorio
    alt-r) rf ;;    # Borrar un directorio o archivo
    alt-n) nf ;;    # abrir con nvim desde raiz alt-n
    alt-h) fh ;;    # abrir con nvim desde home alt-h
    alt-v) ve ;;    # visualizar un archivo con bat
    alt-c) cr ;;    # para copiar ruta
    alt-l) cl ;;    # alt-l copiar contenido de archivo
    alt-m) fm ;;    # alt-m buscar en el manual
    alt-p) po ;;    # listar procesos actuales
    alt-y) hi ;;    # listar historial
    alt-k) fk ;;    # eliminar proceso
  esac
}

# Ir a carpeta
ir() {
  local out key sel
  out=$(fdfind . / -H -t d 2>/dev/null | \
    fzf --expect=esc,alt-i,alt-r,alt-h,alt-n,alt-v,alt-c,alt-l,alt-m,alt-p,alt-y,alt-k --prompt="Ir a La Carpeta: ") || return
  key=$(head -n1 <<< "$out")
  # Si se presionó escape, salimos sin hacer nada
  if [[ "$key" = "esc" ]]; then
    zle reset-prompt
    return
  fi
  sel=$(sed -n '2p' <<< "$out")
  if [[ -n "$key" && "$key" != "enter" ]]; then
    _switch_menu "$key"
    return
  fi
  if [[ -n "$sel" ]]; then
    cd "$sel" && zle reset-prompt
  fi
}
zle -N ir
bindkey "^[i" ir

# Borrar archivo o directorio
rf() {
  local out key sel
  out=$(fdfind . / -H -E undodir 2>/dev/null | \
    fzf --expect=esc,alt-i,alt-r,alt-h,alt-n,alt-v,alt-c,alt-l,alt-m,alt-p,alt-y,alt-k --prompt="Borrar Archivo o Directorio: ") || return
  key=$(head -n1 <<< "$out")
  if [[ "$key" = "esc" ]]; then
    zle reset-prompt
    return
  fi
  sel=$(sed -n '2p' <<< "$out")
  if [[ -n "$key" && "$key" != "enter" ]]; then
    _switch_menu "$key"
    return
  fi
  if [[ -n "$sel" ]]; then
    rm -rf "$sel" && zle reset-prompt
  fi
}
zle -N rf
bindkey "^[r" rf

# Abrir con nvim (desde raiz)
nf() {
  local out key sel
  out=$(sh -c 'fdfind . / -H -tf -E run/systemd -E usr -E lib -E var -E proc -E udev -E sys -E undodir -E discord -E "*.cache" -E "*.mozilla" -E "*.png" -E "*.jpg" -E "*.jpeg" -E "*.gif" -E "*.svg" -E "*.bmp" -E "*.mp3" -E "*.iso" -E "*.db" -E "*.tdb" 2>/dev/null' | \
    fzf --height 80% -e --cycle --border --multi \
        --expect=esc,alt-i,alt-r,alt-h,alt-n,alt-v,alt-c,alt-l,alt-m,alt-p,alt-y,alt-k \
        --prompt="Abrir Con Nvim: ") || return
  key=$(head -n1 <<< "$out")
  if [[ "$key" = "esc" ]]; then
    zle reset-prompt
    return
  fi
  sel=$(sed -n '2p' <<< "$out")
  if [[ -n "$key" && "$key" != "enter" ]]; then
    _switch_menu "$key"
    return
  fi
  if [[ -n "$sel" ]]; then
    echo "$sel" | xargs -r nvim && zle reset-prompt
  fi
}
zle -N nf
bindkey 'º' nf

# Abrir con nvim (desde home)
fh() {
  local out key sel
  out=$(sh -c 'fdfind . -H -tf -E undodir -E discord -E "*.cache" -E "*.mozilla" -E "*.png" -E "*.jpg" -E "*.jpeg" -E "*.gif" -E "*.svg" -E "*.bmp" -E "*.mp3" -E "*.iso" -E "*.db" -E "*.tdb" 2>/dev/null' | \
    fzf --height 80% -e --cycle --border --multi \
        --expect=esc,alt-i,alt-r,alt-h,alt-n,alt-v,alt-c,alt-l,alt-m,alt-p,alt-y,alt-k \
        --prompt="Abrir Con Nvim: ") || return
  key=$(head -n1 <<< "$out")
  if [[ "$key" = "esc" ]]; then
    zle reset-prompt
    return
  fi
  sel=$(sed -n '2p' <<< "$out")
  if [[ -n "$key" && "$key" != "enter" ]]; then
    _switch_menu "$key"
    return
  fi
  if [[ -n "$sel" ]]; then
    echo "$sel" | xargs -r nvim && zle reset-prompt
  fi
}
zle -N fh
bindkey "^[^i" fh

# Vista Previa De Archivo
ve() {
  local out key sel
  out=$(fdfind . / -H -t f -E undodir 2>/dev/null | \
    fzf --expect=esc,alt-i,alt-r,alt-h,alt-n,alt-v,alt-c,alt-l,alt-m,alt-p,alt-y,alt-k --prompt="Vista Previa De: ") || return
  key=$(head -n1 <<< "$out")
  if [[ "$key" = "esc" ]]; then
    zle reset-prompt
    return
  fi
  sel=$(sed -n '2p' <<< "$out")
  if [[ -n "$key" && "$key" != "enter" ]]; then
    _switch_menu "$key"
    return
  fi
  if [[ -n "$sel" ]]; then
    echo "$sel" | xargs -r bat && zle reset-prompt
  fi
}
zle -N ve
bindkey "^[v" ve

# Copiar Ruta
cr() {
  local out key sel
  out=$(fdfind . / -H -E undodir 2>/dev/null | \
    fzf --expect=esc,alt-i,alt-r,alt-h,alt-n,alt-v,alt-c,alt-l,alt-m,alt-p,alt-y,alt-k --prompt="Copiar Ruta: ") || return
  key=$(head -n1 <<< "$out")
  if [[ "$key" = "esc" ]]; then
    zle reset-prompt
    return
  fi
  sel=$(sed -n '2p' <<< "$out")
  if [[ -n "$key" && "$key" != "enter" ]]; then
    _switch_menu "$key"
    return
  fi
  if [[ -n "$sel" ]]; then
    echo -n "$sel" | tr -d '\n' | wl-copy && zle reset-prompt
  fi
}
zle -N cr
bindkey "¢" cr

# Copiar en Clipboard (contenido)
cl() {
  local out key sel
  out=$(fdfind . / -H -E undodir 2>/dev/null | \
    fzf --expect=esc,alt-i,alt-r,alt-h,alt-n,alt-v,alt-c,alt-l,alt-m,alt-p,alt-y,alt-k --prompt="Copiar en Clipboard: ") || return
  key=$(head -n1 <<< "$out")
  if [[ "$key" = "esc" ]]; then
    zle reset-prompt
    return
  fi
  sel=$(sed -n '2p' <<< "$out")
  if [[ -n "$key" && "$key" != "enter" ]]; then
    _switch_menu "$key"
    return
  fi
  if [[ -n "$sel" ]]; then
    echo "$sel" | tr -d '\n' | xargs cat | wl-copy && zle reset-prompt
  fi
}
zle -N cl
bindkey "^[c" cl

# Buscar en el historial
hi() {
  local selected=$({ ([ -n "$ZSH_NAME" ] && history 0) | sed 's/^ *[0-9][0-9]*  *//g'; echo ""; } | fzf +s --tac --prompt="Historial: ")
  BUFFER=$selected
  zle redisplay
}
zle -N hi
bindkey '^r' hi

# Buscar en man
fm() {
  man -k . | fzf --prompt='Man > ' | awk '{print $1}' | xargs -r man && zle reset-prompt
}
zle -N fm
bindkey "µ" fm

# Mostrar procesos actuales
po() {
  ps aux | grep --color=always "$1" | grep -v grep | fzf --prompt="Procesos Actuales: " | xargs -r && zle reset-prompt
}
zle -N po
bindkey "^[y" po

# Finalizar un proceso
fk() {
  pid=$(ps -ef | sed 1d | fzf --prompt="Eliminar proceso ➤ " --pointer="➤ " --marker="➤ " | awk '{print $2}')
  if [ "x$pid" != "x" ]; then 
    kill -${1:-9} $pid 
  fi && zle reset-prompt
}
zle -N fk
bindkey "^k" fk

# EXTRAER COMPRIMIDO CON ALIAS ex
ex() {
[ $# -eq 0 ] && echo "no se paso un archivo a la funcion" && return 2
	for file in $*; do
		if [ -f $file ] ; then
			case $file in
				*.tar.bz2)   tar xvjf $file    ;;
				*.tar.gz)    tar xvzf $file    ;;
				*.bz2)       bunzip2 $file     ;;
				*.rar)       rar x $file       ;;
				*.gz)        gunzip $file      ;;
				*.tar)       tar xvf $file     ;;
				*.tbz2)      tar xvjf $file    ;;
				*.tgz)       tar xvzf $file    ;;
				*.zip)       unzip $file       ;;
				*.Z)         uncompress $file  ;;
				*.7z)        7z x $file        ;;
				*)           echo "NO SE COMO EXTRAER '$file'..." ;;
			esac
		else
			echo "'$file' NO ES UN ARCHIVO VALIDO!"
		fi
	done
}

# FUNCIONES PARA EL PROMPT
# Función personalizada para mostrar la rama de Git con iconos en el prompt
git_b() {
    # Verificar si estamos en un repositorio Git
    if git rev-parse --is-inside-work-tree &> /dev/null; then
        # Obtener el nombre de la rama actual
        branch=$(git branch 2> /dev/null | grep '*' | sed 's/* //')

        # Verificar si hay cambios en el repositorio
        if [[ -n $(git status --porcelain 2> /dev/null) ]]; then
            echo "  $branch %F{#f33334} %f"  # Ícono para repositorio sucio
        else
            echo "  $branch"
        fi
    else
        # No estamos en un repositorio Git, no mostrar nada
        echo ""
    fi
}

# Función para establecer el prompt según si estamos en Tmux
set_prompt() {
    if [[ -z "$TMUX" ]]; then
        # Cambia el prompt cuando estás en Tmux
        if [[ "$(id -u)" -eq "0" ]]; then
            PROMPT='%B%F{#f41818}%n%f%F{#ffe647} %f%F{#58d68d}%m%f %f%F{#ffffff}%~%f%F{#18b1f4}$(git_b)%f %F{#f41818}#%f%b ' # Prompt root fuera de Tmux
        elif [[ "$(id -u)" -eq "1000" ]]; then
            PROMPT='%B%F{#91fe36}%n%f%F{#ffe647} %f%F{#58d68d}%m%f %f%F{#fe820e}%~%f%F{#18b1f4}$(git_b)%f %F{#039915}%f%b ' # Prompt usuario fuera de Tmux
        fi
    else
        # Prompt normal cuando no estás en Tmux
        if [[ "$(id -u)" -eq "0" ]]; then
            PROMPT='%B%F{#f41818}%n%f%F{#ffe647} %f%F{#58d68d}%m%f %f%F{#ffffff}%~%f%F{#18b1f4}$(git_b)%f %F{#f41818}#%f%b %B%F{#0fff15} %f%b ' # Prompt root en Tmux
        elif [[ "$(id -u)" -eq "1000" ]]; then
            PROMPT='%B%F{#ff0036}%n%f%F{#ffe647} %f%F{#3edfff}%m%f %f%F{#f2c2c2}%~%f%F{#ca50fc}$(git_b)%f %B%F{#0fff15} %f%b ' # Prompt usuario en Tmux
        fi
    fi
}
set_prompt # Llama a la función para establecer el prompt
