#!/usr/bin/env bash

# set +e supuestamente ayuda a mostrar los errores probar

# Definición de colores
GREEN="\033[1;92m"
YELLOW="\033[1;93m"
RESET="\033[0m"

# Funciones de impresión
function print_live {
    printf "${GREEN}%s${RESET}\n" "$1"
}

function print_disco {
    printf "${YELLOW}%s${RESET}\n" "$1"
}

# Comprobar si se ejecuta como root
if [ "$(id -u)" -ne 0 ]; then
    echo "Este script debe ejecutarse como root."
    exit 1
fi

# Comprobar conexión a Internet
if ! ping -c 1 www.google.com &> /dev/null; then
echo "██╗      █████╗      ██████╗ ██████╗ ███╗   ██╗███████╗██╗  ██╗██╗ ██████╗ ███╗   ██╗";
echo "██║     ██╔══██╗    ██╔════╝██╔═══██╗████╗  ██║██╔════╝╚██╗██╔╝██║██╔═══██╗████╗  ██║";
echo "██║     ███████║    ██║     ██║   ██║██╔██╗ ██║█████╗   ╚███╔╝ ██║██║   ██║██╔██╗ ██║";
echo "██║     ██╔══██║    ██║     ██║   ██║██║╚██╗██║██╔══╝   ██╔██╗ ██║██║   ██║██║╚██╗██║";
echo "███████╗██║  ██║    ╚██████╗╚██████╔╝██║ ╚████║███████╗██╔╝ ██╗██║╚██████╔╝██║ ╚████║";
echo "╚══════╝╚═╝  ╚═╝     ╚═════╝ ╚═════╝ ╚═╝  ╚═══╝╚══════╝╚═╝  ╚═╝╚═╝ ╚═════╝ ╚═╝  ╚═══╝";
echo "                                                                                     ";
echo "███████╗ █████╗ ██╗     ██╗      ██████╗ ";
echo "██╔════╝██╔══██╗██║     ██║     ██╔═══██╗";
echo "█████╗  ███████║██║     ██║     ██║   ██║";
echo "██╔══╝  ██╔══██║██║     ██║     ██║   ██║";
echo "██║     ██║  ██║███████╗███████╗╚██████╔╝";
echo "╚═╝     ╚═╝  ╚═╝╚══════╝╚══════╝ ╚═════╝ ";
    exit 1
fi

print_live "ACTUALIZANDO SISTEMA DE ISO"
sleep 2
clear

# Configuración de idioma
IDIOMA="es_AR.UTF-8"
echo "$IDIOMA UTF-8" > /etc/locale.gen
locale-gen
echo "LANG=$IDIOMA" > /etc/locale.conf
export LANG="$IDIOMA"
locale-gen
echo ""
clear

# Obtener discos disponibles
# discosdisponibles=$(parted -l | grep /dev/ | awk '{if (NR!=1) {print}}' | sed '/sr/d')
discosdisponibles=$(lsblk -d -o NAME | grep -v '^sr0$')
clear
printf '%*s\n' "${COLUMNS:-$(tput cols)}" '' | tr ' ' _
print_live "Rutas de Disco disponible:"
echo "$discosdisponibles"
printf '%*s\n' "${COLUMNS:-$(tput cols)}" '' | tr ' ' _

# Solicitar datos al usuario
print_live "INGRESAR DISCO Y DATOS DE USUARIO"
read -p "Introduce disco para instalar Arch: " disco
read -p "Introduce Nombre usuario: " user
read -s -p "Introduce la clave de $user: " userpasswd
echo ""
read -s -p "Introduce la clave de Root/Administrador: " rootpasswd
echo ""

# Verificar contraseñas
function verify_password {
   local prompt="$1"
   local password="$2"
   while true; do
       read -s -p "$prompt" confirm_password
       echo ""
       if [ "$password" == "$confirm_password" ]; then
           echo "Contraseña confirmada."
           break
       else
           echo "Las contraseñas no coinciden. Intenta de nuevo."
       fi
   done
}

verify_password "Confirma la clave de $user: " "$userpasswd"
verify_password "Confirma la clave de Root/Administrador: " "$rootpasswd"

# Selección de escritorio
print_live "ESCRITORIOS"
echo ""
printf '%*s\n' "${COLUMNS:-$(tput cols)}" '' | tr ' ' _
print_live "Ingresa una opción marcando el número correcto:"
echo "1. Terminal Virtual (TTY)"
echo "2. bspwm"
echo "3. Xfce4"
echo "4. Kde Plasma"
echo "5. Gnome 40"
echo "6. I3"
echo "7. wayland"
read -p "Introduce la opción de Escritorio: " escritorio
echo ""

print_live "MOSTRAR DATOS GUARDADOS "
clear
printf '%*s\n' "${COLUMNS:-$(tput cols)}" '' | tr ' ' _
echo ''
echo "Selección de Disco: $disco"
echo ''
echo "Tu usuario: $user"
echo ''

print_live "DETECTANDO SI TENEMOS UEFI O BIOS LEGACY"
uefi=$( ls /sys/firmware/efi/ | grep -ic efivars )

if [ $uefi == 1 ]
then
clear
printf '%*s\n' "${COLUMNS:-$(tput cols)}" '' | tr ' ' _
echo ""
print_live "Tu Sistema es UEFI"
echo ""
date "+%F %H:%M"
sleep 3

: << 'comment'
Fuente: https://wiki.archlinux.org/index.php/GPT_fdisk

███████╗███████╗██╗      ██╗  ██╗ ██████╗ ███╗   ███╗███████╗    ██████╗  ██████╗  ██████╗ ████████╗
██╔════╝██╔════╝██║      ██║  ██║██╔═══██╗████╗ ████║██╔════╝    ██╔══██╗██╔═══██╗██╔═══██╗╚══██╔══╝
█████╗  █████╗  ██║█████╗███████║██║   ██║██╔████╔██║█████╗█████╗██████╔╝██║   ██║██║   ██║   ██║   
██╔══╝  ██╔══╝  ██║╚════╝██╔══██║██║   ██║██║╚██╔╝██║██╔══╝╚════╝██╔══██╗██║   ██║██║   ██║   ██║   
███████╗██║     ██║      ██║  ██║╚██████╔╝██║ ╚═╝ ██║███████╗    ██║  ██║╚██████╔╝╚██████╔╝   ██║   
╚══════╝╚═╝     ╚═╝      ╚═╝  ╚═╝ ╚═════╝ ╚═╝     ╚═╝╚══════╝    ╚═╝  ╚═╝ ╚═════╝  ╚═════╝    ╚═╝
!ACTUALMENTE EFI-ROOT¡ COMENTAR O BORRAR EL DE HOME QUE ES EL COMENTADO ABAJO PARA TENER ROOT Y EFI 
NUMERO PARA ROOT 8304 DONDE VA t=
comment

(echo Ignore) | sgdisk --zap-all ${disco}
parted ${disco} mklabel gpt
(echo 2; echo w; echo Y) | gdisk ${disco}
sgdisk ${disco} -n=1:0:+512M -t=1:ef00
#sgdisk ${disco} -n=2:0:+20G -t=2:8302 
sgdisk ${disco} -n=2:0:0:8304
fdisk -l ${disco} > /tmp/partition
echo ""
cat /tmp/partition
sleep 3
partition="$(cat /tmp/partition | grep /dev/ | awk '{if (NR!=1) {print}}' | sed 's/*//g' | awk -F ' ' '{print $1}')"
echo $partition | awk -F ' ' '{print $1}' >  boot-efi
#echo $partition | awk -F ' ' '{print $2}' >  home-efi
echo $partition | awk -F ' ' '{print $2}' >  root-efi

clear
printf '%*s\n' "${COLUMNS:-$(tput cols)}" '' | tr ' ' _
echo ""
echo "Partición EFI es:"
cat boot-efi
echo ""
#echo "Partición home es:"
#cat home-efi
echo ""
echo "Partición ROOT es:"
cat root-efi
sleep 3
clear
echo ""
print_live "Formateando Particiones"
mkfs.ext4 $(cat root-efi)
mount $(cat root-efi) /mnt

mkdir -p /mnt/efi
mkfs.fat -F 32 $(cat boot-efi)
mount $(cat boot-efi) /mnt/efi

#mkdir -p /mnt/home
#mkfs.ext4 $(cat home-efi)
#mount $(cat home-efi) /mnt/home

rm boot-efi
#rm home-efi
rm root-efi

clear
lsblk -l
else
clear
printf '%*s\n' "${COLUMNS:-$(tput cols)}" '' | tr ' ' _
echo ""
print_live "Tu Sistema es BIOS"
echo ""
date "+%F %H:%M"
sleep 3

: << 'comment'
██████╗ ██╗ ██████╗ ███████╗
██╔══██╗██║██╔═══██╗██╔════╝
██████╔╝██║██║   ██║███████╗
██╔══██╗██║██║   ██║╚════██║
██████╔╝██║╚██████╔╝███████║
╚═════╝ ╚═╝ ╚═════╝ ╚══════╝
PARTICIONES -BOOT-ROOT-HOME
particion boot +100M
particion home
particion root +100%
comment

	sgdisk --zap-all ${disco}
	(echo o; echo n; echo p; echo 1; echo ""; echo +512M; echo n; echo p; echo 2; echo ""; echo +20G; echo n; echo p; echo 3; echo ""; echo ""; echo t; echo 2; echo 82; echo a; echo 1; echo w; echo q) | fdisk ${disco}
	fdisk -l ${disco} > /tmp/partition
	cat /tmp/partition
sleep 3
partition="$(cat /tmp/partition | grep /dev/ | awk '{if (NR!=1) {print}}' | sed 's/*//g' | awk -F ' ' '{print $1}')"
echo $partition | awk -F ' ' '{print $1}' >  boot-bios
echo $partition | awk -F ' ' '{print $2}' >  swap-bios
echo $partition | awk -F ' ' '{print $3}' >  root-bios

clear
printf '%*s\n' "${COLUMNS:-$(tput cols)}" '' | tr ' ' _
echo "Partición BOOT es:" 
cat boot-bios
echo ""
echo "Partición SWAP es:"
cat swap-bios
echo ""
echo "Partición ROOT es:"
cat root-bios
sleep 3
clear
echo ""
print_live "Formateando Particiones"
echo ""
mkfs.ext4 $(cat root-bios) 
mount $(cat root-bios) /mnt 

mkdir -p /mnt/boot
mkfs.ext4 $(cat boot-bios) 
mount $(cat boot-bios) /mnt/boot

mkswap $(cat swap-bios) 
swapon $(cat swap-bios)
clear
lsblk -l
sleep 3
clear
	
fi
print_live "ACTUALIZACION DE LLAVES DEL LIVE CD"
pacman -Sy archlinux-keyring reflector python rsync glibc curl --needed --noconfirm 
sleep 3
clear

print_live "MIRRORLIST MAS RAPIDOS PARA EL LIVE CD"
echo ""
reflector --verbose --latest 5 --protocol http --protocol https --sort rate --save /etc/pacman.d/mirrorlist
cat /etc/pacman.d/mirrorlist
sleep 3
clear

print_live "DESCARGA SIMULTANEA PARA EL LIVE CD"
sed -i 's/#ParallelDownloads = 5/ParallelDownloads = 16/g' /etc/pacman.conf
clear
print_disco "INSTALANDO PROGRAMAS PARA ETHERNET"
arch-chroot /mnt /bin/bash -c "pacman -S dhcpcd networkmanager net-tools ifplugd --noconfirm"
arch-chroot /mnt /bin/bash -c "systemctl enable dhcpcd NetworkManager"
cat << 'EOF' >> /mnt/etc/dhcpcd.conf
noipv6rs
noipv6
EOF
clear

print_disco "INSTALANDO SISTEMA BASE EN NUESTRO DISCO"
echo ""
pacstrap /mnt linux xz util-linux tar systemd-sysvcompat systemd shadow psmisc procps-ng pciutils licenses iputils iproute2 glibc gcc-libs filesystem coreutils bzip2 bash base-devel nano reflector python rsync zsh neovim git 
# pacstrap /mnt base base-devel nano reflector python rsync curl wget zsh neovim git neofetch
clear

# Creando Archiv FSTAB para detectar al iniciar el sistema
print_disco "CREANDO ARCHIVO FSTAB"
genfstab -p /mnt >> /mnt/etc/fstab
cat /mnt/etc/fstab
sleep 2
clear

# Configurando pacman para que tenga colores con el repo de MultiLib
print_disco "ILOVECANDY EN PACMAN.CONF"
sed -i 's/#Color/Color/g' /mnt/etc/pacman.conf
sed -i 's/#TotalDownload/TotalDownload/g' /mnt/etc/pacman.conf
sed -i 's/#VerbosePkgLists/VerbosePkgLists/g' /mnt/etc/pacman.conf
sed -i "37i ILoveCandy" /mnt/etc/pacman.conf
sed -i 's/#ParallelDownloads = 5/ParallelDownloads = 16/g' /mnt/etc/pacman.conf
#sed -i 's/#\[multilib\]/\[multilib\]/g' /mnt/etc/pacman.conf
#sed -i "s/#Include = \/etc\/pacman.d\/mirrorlist/Include = \/etc\/pacman.d\/mirrorlist/g" /mnt/etc/pacman.conf
clear

#Hosts y Nombre de computador
print_disco "HOSTNAME Y HOSTS EN DISCO FISICO"
#read -p "Elija El Nombre De Hostname: " hos
hos=lenox
echo "$hos" > /mnt/etc/hostname
echo "127.0.1.1 $hos.localdomain $hos" > /mnt/etc/hosts
clear
echo "Hostname: $(cat /mnt/etc/hostname)"
echo ""
echo "Hosts: $(cat /mnt/etc/hosts)"
echo ""
sleep 2
clear

# Agregando usuario y claves con administrador
print_disco "CREANDO USUARIO, ROOT Y SUS PASSWORDS"
arch-chroot /mnt /bin/bash -c "(echo $rootpasswd ; echo $rootpasswd) | passwd root"
arch-chroot /mnt /bin/bash -c "useradd -mU -s /bin/zsh $user"
arch-chroot /mnt /bin/bash -c "(echo $userpasswd ; echo $userpasswd) | passwd $user"
sed -i "80i $user ALL=(ALL) ALL"  /mnt/etc/sudoers
clear

# Configuración de idioma disco fisico
IDIOMA="es_AR.UTF-8"
echo "$IDIOMA UTF-8" > /mnt/etc/locale.gen
arch-chroot /mnt /bin/bash -c "locale-gen"
echo "LANG=$IDIOMA" > /mnt/etc/locale.conf
export LANG="$IDIOMA"
locale-gen
echo ""
arch-chroot /mnt /bin/bash -c "locale-gen"
sleep 2
clear

print_disco "ZONA HORARIA AUTOMATICA DISCO FISICO"
zonahoraria="America/Argentina/Buenos_Aires"
arch-chroot /mnt /bin/bash -c "ln -sf /usr/share/zoneinfo/$zonahoraria /etc/localtime"
arch-chroot /mnt /bin/bash -c "timedatectl set-timezone $zonahoraria"
arch-chroot /mnt /bin/bash -c "pacman -S ntp --needed --noconfirm"
arch-chroot /mnt /bin/bash -c "ntpd -qg"
arch-chroot /mnt /bin/bash -c "hwclock --systohc"
clear

print_disco "MAPA DE TECLADO PARA LA TERMINAL VIRTUAL"
keymap="es"
echo "KEYMAP=$keymap" > /mnt/etc/vconsole.conf
cat /mnt/etc/vconsole.conf
sleep 2
clear

# Actualiza lista de mirrors en tu disco
print_disco "ACTUALIZANDO LISTA DE MIRRORS EN TU DISCO FISICO"
arch-chroot /mnt /bin/bash -c "reflector --verbose --latest 5 --protocol http --protocol https --sort rate --save /etc/pacman.d/mirrorlist"
cat /mnt/etc/pacman.d/mirrorlist
sleep 3
clear

print_disco "INSTALACION DEL KERNEL ESTABLE"
arch-chroot /mnt /bin/bash -c "pacman -S linux-firmware linux linux-headers mkinitcpio --needed --noconfirm"
clear

print_disco "INSTALACION DE ARRANQUE GRUB"
if [ $uefi == 1 ]
then
sleep 2
clear
arch-chroot /mnt /bin/bash -c "pacman -S grub efibootmgr dosfstools --noconfirm --needed"
#arch-chroot /mnt /bin/bash -c "pacman -S grub efibootmgr os-prober dosfstools --noconfirm"
echo '' 
print_disco "Instalando EFI System >> bootx64.efi" 
arch-chroot /mnt /bin/bash -c 'grub-install --target=x86_64-efi --efi-directory=/efi --removable' 
echo '' 
print_disco "Instalando UEFI System >> grubx64.efi" 
arch-chroot /mnt /bin/bash -c 'grub-install --target=x86_64-efi --efi-directory=/efi --bootloader-id=Arch'
clear
# Colocar loglevel 3 en default grub
sed -i "6iGRUB_CMDLINE_LINUX_DEFAULT="loglevel=3"" /mnt/etc/default/grub
sed -i '7d' /mnt/etc/default/grub
echo ''
arch-chroot /mnt /bin/bash -c "grub-mkconfig -o /boot/grub/grub.cfg"
echo '' 
ls -l /mnt/efi 
sleep 2
else
# Instalación de GRUB BIOS
clear
arch-chroot /mnt /bin/bash -c "pacman -S grub --noconfirm --needed"
#arch-chroot /mnt /bin/bash -c "pacman -S grub os-prober --noconfirm --needed"
echo '' 
arch-chroot /mnt /bin/bash -c "grub-install --target=i386-pc $disco"

sed -i "6iGRUB_CMDLINE_LINUX_DEFAULT="loglevel=3"" /mnt/etc/default/grub
sed -i '7d' /mnt/etc/default/grub

echo ''
arch-chroot /mnt /bin/bash -c "grub-mkconfig -o /boot/grub/grub.cfg"
echo '' 
ls -l /mnt/boot 
echo '' 
fi
clear
arch-chroot /mnt /bin/bash -c "pacman -S grub --noconfirm --needed"
arch-chroot /mnt /bin/bash -c "pacman -S grub os-prober --noconfirm --needed"
echo '' 
arch-chroot /mnt /bin/bash -c "grub-install --target=i386-pc $disco"

sed -i "6iGRUB_CMDLINE_LINUX_DEFAULT="loglevel=3"" /mnt/etc/default/grub
sed -i '7d' /mnt/etc/default/grub

echo ''
arch-chroot /mnt /bin/bash -c "grub-mkconfig -o /boot/grub/grub.cfg"
echo '' 
ls -l /mnt/boot 
echo '' 
clear

# Ethernet
print_disco "INSTALANDO PROGRAMAS PARA ETHERNET"
arch-chroot /mnt /bin/bash -c "pacman -S dhcpcd networkmanager net-tools ifplugd --noconfirm"
#arch-chroot /mnt /bin/bash -c "pacman -S dhcpcd networkmanager iwd net-tools ifplugd --noconfirm"
arch-chroot /mnt /bin/bash -c "systemctl enable dhcpcd NetworkManager"
cat << 'EOF' >> /mnt/etc/dhcpcd.conf
noipv6rs
noipv6
EOF
clear

# Wifi
#echo -e '\033[1;92m' "INSTALANDO PROGRAMAS PARA WIFI"
#arch-chroot /mnt /bin/bash -c "pacman -S iw wireless_tools wpa_supplicant dialog wireless-regdb --noconfirm"

# bluetooth
#echo -e '\033[1;92m' "INSTALANDO PROGRAMAS PARA BLUETOOTH"
#arch-chroot /mnt /bin/bash -c "pacman -S bluez bluez-utils pulseaudio-bluetooth"

print_disco "SHELL ZSH PARA USUARIO Y ROOT"
SH=zsh
arch-chroot /mnt /bin/bash -c "chsh -s /usr/bin/$SH root"
arch-chroot /mnt /bin/bash -c "chsh -s /bin/$SH $user"
clear

# Instalación de drivers de video
function install_video_drivers {
    echo -e '\033[0;36m' "INSTALANDO DRIVER DE VIDEO"
    if lspci | grep -qE "NVIDIA|nVidia"; then
        arch-chroot /mnt /bin/bash -c "pacman -S xf86-video-nouveau mesa lib32-mesa mesa-vdpau libva-mesa-driver lib32-mesa-vdpau lib32-libva-mesa-driver libva-vdpau-driver libvdpau-va-gl libva-utils vdpauinfo libvdpau lib32-libvdpau opencl-mesa clinfo ocl-icd lib32-ocl-icd opencl-headers --noconfirm"
     elif lspci | grep -qE "Radeon R|R2/R3/R4/R5"; then
         arch-chroot /mnt /bin/bash -c "pacman -S xf86-video-amdgpu mesa lib32-mesa vulkan-radeon lib32-vulkan-radeon mesa-vdpau libva-mesa-driver lib32-mesa-vdpau lib32-libva-mesa-driver libva-vdpau-driver libvdpau-va-gl libva-utils vdpauinfo opencl-mesa clinfo ocl-icd lib32-ocl-icd opencl-headers --noconfirm"
     elif lspci | grep -qE "ATI|AMD/ATI"; then
         arch-chroot /mnt /bin/bash -c "pacman -S xf86-video-amdgpu xf86-video-ati mesa lib32-mesa mesa-vdpau libva-mesa-driver lib32-mesa-vdpau lib32-libva-mesa-driver libva-vdpau-driver libvdpau-va-gl libva-utils vdpauinfo opencl-mesa clinfo ocl-icd lib32-ocl-icd opencl-headers --noconfirm"
     elif lspci | grep -q "Intel"; then
         arch-chroot /mnt /bin/bash -c "pacman -S xf86-video-intel vulkan-intel mesa lib32-mesa intel-media-driver libva-intel-driver libva-vdpau-driver libvdpau-va-gl libva-utils vdpauinfo intel-compute-runtime beignet clinfo ocl-icd lib32-ocl-icd opencl-headers --noconfirm"
     else
         arch-chroot /mnt /bin/bash -c "pacman -S xf86-video-vesa xf86-video-fbdev mesa mesa-libgl lib32-mesa --noconfirm"
     fi
}

install_video_drivers
clear

print_disco "ESCRITORIO SELECCIONADO"
case $escritorio in
  1) 
    echo "Escritorio : Terminal Virtual (TTY)"
    sleep 3
    clear
    packages=(
        "zsh zsh-completions zsh-syntax-highlighting zsh-autosuggestions"
        "xorg xorg-apps xorg-xinit xorg-twm xterm xorg-xclock"
        "bat vifm fzf tmux xclip lsd pacman-contrib"
    )
    ;;
  2) 
    echo "Escritorio : Bspwm"
    sleep 3
    clear
    packages=(
        "firefox zsh-completions zsh-syntax-highlighting zsh-autosuggestions"
        "flameshot obsidian neovim bat vifm fzf tmux xclip file-roller lsd rofi bspwm sxhkd gvfs picom"
        "xorg xorg-apps xorg-xinit xorg-twm xterm xorg-xclock i3lock xed"
        "android-file-transfer android-tools android-udev feh pacman-contrib" 
        "gvfs-gphoto2 gvfs-mtp mtpfs libnotify dunst pulseaudio"
        "pcmanfm lxappearance zathura zathura-pdf-poppler imagemagick"
    )
    ;;
  3) 
    echo "Escritorio : Xfce4"
    sleep 3
    packages=(
        "firefox xorg xorg-twm xorg-apps xorg-xinit xterm xorg-xclock lightdm lightdm-gtk-greeter lightdm-gtk-greeter-settings"
        "accountsservice light-locker tmux xfce4 xfce4-goodies flameshot network-manager-applet ffmpegthumbnailer ffmpegthumbs" 
    )
    arch-chroot /mnt /bin/bash -c "systemctl enable lightdm"
    ;;
  4) 
    echo "Escritorio : Kde Plasma"
    sleep 3
    packages=(
        "xorg xorg-apps xorg-xinit xorg-twm xterm xorg-xclock" 
        "plasma dolphin konsole discover sddm ffmpegthumbs ffmpegthumbnailer"
    )
    arch-chroot /mnt /bin/bash -c "systemctl enable sddm"
    ;;
  5) 
    echo "Escritorio : Gnome 40"
    sleep 3
    packages=(
        "firefox xorg xorg-apps xorg-xinit xterm xorg-xclock gnome-font-viewer gnome-terminal"
        "gnome-shell gdm gnome-control-center gnome-tweaks pavucontrol ttf-hack ttf-inconsolata nautilus"
    )
    arch-chroot /mnt /bin/bash -c "systemctl enable gdm"
    ;;
  6) 
    echo -e '\033[0;34m' "Escritorio : I3"
    sleep 3
    packages=(
        "firefox i3-gaps i3-wm i3blocks i3lock zsh-completions zsh-syntax-highlighting zsh-autosuggestions imagemagick pulseaudio"
        "flameshot xorg xorg-apps xorg-xinit xorg-twm xterm xorg-xclock bat vifm fzf tmux xclip file-roller dunst lsd"
        "rofi gvfs picom pcmanfm lxappearance zathura zathura-pdf-poppler i3lock xed feh pacman-contrib"
    )
    ;;
  7) 
    echo -e '\033[0;34m' "Escritorio : wayland"
    sleep 3
    packages=(
        "firefox slurp waybar obsidian neovim git hyprland swaybg zsh-completions zsh-syntax-highlighting zsh-autosuggestions pulseaudio"
        "nwg-look wayland wlroots xorg-xrdb xorg-xwayland xterm bat vifm rofi fzf tmux xclip file-roller"
        "lsd gvfs pcmanfm zathura zathura-pdf-poppler xed feh pacman-contrib imagemagick libnotify dunst"
    )
    ;;
  *) 
    echo "¡Incorrecto! por defecto se instalará Terminal Virtual (TTY)"
    packages=(
        "zsh zsh-completions zsh-syntax-highlighting zsh-autosuggestions"
        "xorg xorg-apps xorg-xinit xorg-twm xterm xorg-xclock"
        "bat vifm fzf tmux xclip lsd pacman-contrib"
    )
    ;;
esac

# Instalación de paquetes
for package in "${packages[@]}"; do
    print_disco "INSTALANDO $package"
    arch-chroot /mnt /bin/bash -c "pacman -S --needed --noconfirm $package"
done
clear

# Clonación de repositorio y configuración de permisos
echo -e '\033[1;95m' "CLONANDO REPO EN HOME DEL DISCO"
arch-chroot /mnt /bin/bash -c "git clone -b hypr https://github.com/zafnet/wmarch /home/$user/wmarch"
sleep 2
clear

echo -e '\033[1;95m' "CAMBIANDO PERMISOS PARA REPO EN HOME DEL DISCO"
arch-chroot /mnt /bin/bash -c "chown -R $user:$user /home/$user/wmarch/"
sleep 2
clear

#echo -e '\033[1;95m' "CAMBIANDO PERMISOS PARA DOTS EN DISCO"
#arch-chroot /mnt /bin/bash -c "chmod 744 /home/$user/wmarch/hydots"
#sleep 2
#clear

# Desmontar particiones
echo -e '\033[1;91m' "DESMONTANDO PARTICIONES"
umount -R /mnt
sleep 2
clear

# set -e supuestamente ayuda a mostrar los errores probar

# Reiniciar el sistema (opcional)
# echo -e '\033[1;95m' "REINICIANDO EL SISTEMA"
# reboot
