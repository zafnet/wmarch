#!/usr/bin/env bash

function print_live {
    echo -e "\033[1;92m$1\033[0m"
}

function print_disco {
    echo -e "\033[1;93m$1\033[0m"
}

if [ "$(id -u)" -eq  "0" ]; then

if ping -c 1 www.google.com &> /dev/null; then

echo " ██████╗ ██████╗ ███╗   ██╗███████╗██╗  ██╗██╗ ██████╗ ███╗   ██╗";
echo "██╔════╝██╔═══██╗████╗  ██║██╔════╝╚██╗██╔╝██║██╔═══██╗████╗  ██║";
echo "██║     ██║   ██║██╔██╗ ██║█████╗   ╚███╔╝ ██║██║   ██║██╔██╗ ██║";
echo "██║     ██║   ██║██║╚██╗██║██╔══╝   ██╔██╗ ██║██║   ██║██║╚██╗██║";
echo "╚██████╗╚██████╔╝██║ ╚████║███████╗██╔╝ ██╗██║╚██████╔╝██║ ╚████║";
echo " ╚═════╝ ╚═════╝ ╚═╝  ╚═══╝╚══════╝╚═╝  ╚═╝╚═╝ ╚═════╝ ╚═╝  ╚═══╝";
echo "███████╗██╗  ██╗██╗████████╗ ██████╗ ███████╗ █████╗ ";
echo "██╔════╝╚██╗██╔╝██║╚══██╔══╝██╔═══██╗██╔════╝██╔══██╗";
echo "█████╗   ╚███╔╝ ██║   ██║   ██║   ██║███████╗███████║";
echo "██╔══╝   ██╔██╗ ██║   ██║   ██║   ██║╚════██║██╔══██║";
echo "███████╗██╔╝ ██╗██║   ██║   ╚██████╔╝███████║██║  ██║";
echo "╚══════╝╚═╝  ╚═╝╚═╝   ╚═╝    ╚═════╝ ╚══════╝╚═╝  ╚═╝";
print_live "\n\t\t\t\t ACTUALIZANDO SISTEMA DE ISO"
sleep 2
clear
else
echo "██╗      █████╗      ██████╗ ██████╗ ███╗   ██╗███████╗██╗  ██╗██╗ ██████╗ ███╗   ██╗";
echo "██║     ██╔══██╗    ██╔════╝██╔═══██╗████╗  ██║██╔════╝╚██╗██╔╝██║██╔═══██╗████╗  ██║";
echo "██║     ███████║    ██║     ██║   ██║██╔██╗ ██║█████╗   ╚███╔╝ ██║██║   ██║██╔██╗ ██║";
echo "██║     ██╔══██║    ██║     ██║   ██║██║╚██╗██║██╔══╝   ██╔██╗ ██║██║   ██║██║╚██╗██║";
echo "███████╗██║  ██║    ╚██████╗╚██████╔╝██║ ╚████║███████╗██╔╝ ██╗██║╚██████╔╝██║ ╚████║";
echo "╚══════╝╚═╝  ╚═╝     ╚═════╝ ╚═════╝ ╚═╝  ╚═══╝╚══════╝╚═╝  ╚═╝╚═╝ ╚═════╝ ╚═╝  ╚═══╝";
echo "                                                                                     ";
echo "███████╗ █████╗ ██╗     ██╗      ██████╗ ";
echo "██╔════╝██╔══██╗██║     ██║     ██╔═══██╗";
echo "█████╗  ███████║██║     ██║     ██║   ██║";
echo "██╔══╝  ██╔══██║██║     ██║     ██║   ██║";
echo "██║     ██║  ██║███████╗███████╗╚██████╔╝";
echo "╚═╝     ╚═╝  ╚═╝╚══════╝╚══════╝ ╚═════╝ ";
echo "                                         ";
sleep 2
clear
fi
else
echo  "  ███╗░░██╗░█████╗░  ██████╗░░█████╗░░█████╗░████████╗"
echo  "  ████╗░██║██╔══██╗  ██╔══██╗██╔══██╗██╔══██╗╚══██╔══╝"
echo  "  ██╔██╗██║██║░░██║  ██████╔╝██║░░██║██║░░██║░░░██║░░░"
echo  "  ██║╚████║██║░░██║  ██╔══██╗██║░░██║██║░░██║░░░██║░░░"
echo  "  ██║░╚███║╚█████╔╝  ██║░░██║╚█████╔╝╚█████╔╝░░░██║░░░"
echo  "  ╚═╝░░╚══╝░╚════╝░  ╚═╝░░╚═╝░╚════╝░░╚════╝░░░░╚═╝░░░"
exit
fi
clear
idioma="es_AR.UTF-8"
# idioma="es_AR.UTF8"
clear
echo "$idioma UTF-8" > /etc/locale.gen
locale-gen
echo "LANG=$idioma" > /etc/locale.conf
exportlang=$(echo "LANG=$idioma")
export $exportlang
locale-gen
echo ""
clear
#Disco
discosdisponibles=$(echo "print devices" | parted | grep /dev/ | awk '{if (NR!=1) {print}}' | sed '/sr/d')
clear
printf '%*s\n' "${COLUMNS:-$(tput cols)}" '' | tr ' ' _
echo ""
echo "Rutas de Disco disponible: "
echo ""
echo $discosdisponibles
echo ""
printf '%*s\n' "${COLUMNS:-$(tput cols)}" '' | tr ' ' _

print_live "\n\t\t\t\t INGRESAR DISCO Y DATOS DE USUARIO"
echo ""
read -p "Introduce tu disco a instalar Arch: " disco
echo ""
read -p "Introduce Nombre usuario Nuevo: " user
echo ""
read -s -p "Introduce la clave de $user: " userpasswd
echo ""
read -s -p "Introduce la clave de Root/Administrador: " rootpasswd
echo ""

print_live "\n\t\t\t\t  ESCRITORIOS"
printf '%*s\n' "${COLUMNS:-$(tput cols)}" '' | tr ' ' _
echo ""
echo "Ingresa una opción marcando el numero correcto:"
echo ""
echo "1. Terminal Virtual (TTY)"
echo "2. bspwm"
echo "4. Xfce4"
echo "4. Kde Plasma"
echo "5. Gnome 40"
echo "6. I3"
echo "7. wayland"
echo ""
read -p "Introduce la opción de Escritorio: " escritorio
echo ""

print_live "\n\t\t\t\t MOSTRAR DATOS GUARDADOS "
clear
printf '%*s\n' "${COLUMNS:-$(tput cols)}" '' | tr ' ' _
echo ''
echo "Selección de Disco: $disco"
echo ''
echo "Tu usuario: $user"
echo ''
print_live "\n\t\t\t\t DETECTANDO SI TENEMOS UEFI O BIOS LEGACY"

uefi=$( ls /sys/firmware/efi/ | grep -ic efivars )

if [ $uefi == 1 ]
then
	clear
	printf '%*s\n' "${COLUMNS:-$(tput cols)}" '' | tr ' ' _
	echo ""
	echo "Tu Sistema es UEFI"
	echo ""
	date "+%F %H:%M"
	sleep 3
	#Fuente: https://wiki.archlinux.org/index.php/GPT_fdisk

    #███████╗███████╗██╗      ██╗  ██╗ ██████╗ ███╗   ███╗███████╗    ██████╗  ██████╗  ██████╗ ████████╗
    #██╔════╝██╔════╝██║      ██║  ██║██╔═══██╗████╗ ████║██╔════╝    ██╔══██╗██╔═══██╗██╔═══██╗╚══██╔══╝
    #█████╗  █████╗  ██║█████╗███████║██║   ██║██╔████╔██║█████╗█████╗██████╔╝██║   ██║██║   ██║   ██║   
    #██╔══╝  ██╔══╝  ██║╚════╝██╔══██║██║   ██║██║╚██╔╝██║██╔══╝╚════╝██╔══██╗██║   ██║██║   ██║   ██║   
    #███████╗██║     ██║      ██║  ██║╚██████╔╝██║ ╚═╝ ██║███████╗    ██║  ██║╚██████╔╝╚██████╔╝   ██║   
    #╚══════╝╚═╝     ╚═╝      ╚═╝  ╚═╝ ╚═════╝ ╚═╝     ╚═╝╚══════╝    ╚═╝  ╚═╝ ╚═════╝  ╚═════╝    ╚═╝

    # !ACTUALMENTE EFI-ROOT¡ COMENTAR O BORRAR EL DE HOME QUE ES EL COMENTADO ABAJO PARA TENER ROOT Y EFI 
	# NUMERO PARA ROOT 8304 DONDE VA t=

	(echo Ignore) | sgdisk --zap-all ${disco}
	parted ${disco} mklabel gpt
	(echo 2; echo w; echo Y) | gdisk ${disco}
	sgdisk ${disco} -n=1:0:+512M -t=1:ef00
	#sgdisk ${disco} -n=2:0:+20G -t=2:8302 
    sgdisk ${disco} -n=2:0:0:8304
	fdisk -l ${disco} > /tmp/partition
	echo ""
	cat /tmp/partition
	sleep 3
	partition="$(cat /tmp/partition | grep /dev/ | awk '{if (NR!=1) {print}}' | sed 's/*//g' | awk -F ' ' '{print $1}')"
	echo $partition | awk -F ' ' '{print $1}' >  boot-efi
	#echo $partition | awk -F ' ' '{print $2}' >  home-efi
	echo $partition | awk -F ' ' '{print $2}' >  root-efi  # cambiado a {print$2} para que tome root-efi como la segunda particion ya que arriba puse -n=2:0:0:8304

	clear
	printf '%*s\n' "${COLUMNS:-$(tput cols)}" '' | tr ' ' _
	echo ""
	echo "Partición EFI es:"
	cat boot-efi
	echo ""
	#echo "Partición home es:"
	#cat home-efi
	echo ""
	echo "Partición ROOT es:"
	cat root-efi
	sleep 3
	clear
	echo ""
	echo "Formateando Particiones"
    mkfs.ext4 $(cat root-efi)
	mount $(cat root-efi) /mnt

	mkdir -p /mnt/efi
	mkfs.fat -F 32 $(cat boot-efi)
	mount $(cat boot-efi) /mnt/efi

    #mkdir -p /mnt/home
	#mkfs.ext4 $(cat home-efi)
	#mount $(cat home-efi) /mnt/home

	rm boot-efi
	#rm home-efi
	rm root-efi

	clear
	lsblk -l
else
	clear
	printf '%*s\n' "${COLUMNS:-$(tput cols)}" '' | tr ' ' _
	echo ""
	echo "Tu Sistema es BIOS"
	echo ""
	date "+%F %H:%M"
	sleep 3

     # ██████╗ ██╗ ██████╗ ███████╗
     # ██╔══██╗██║██╔═══██╗██╔════╝
     # ██████╔╝██║██║   ██║███████╗
     # ██╔══██╗██║██║   ██║╚════██║
     # ██████╔╝██║╚██████╔╝███████║
     # ╚═════╝ ╚═╝ ╚═════╝ ╚══════╝
                                                                                      
	 # PARTICIONES -BOOT-ROOT-HOME
	 #  particion boot +100M
	 #  particion home
     #  particion root +100%

	sgdisk --zap-all ${disco}
	(echo o; echo n; echo p; echo 1; echo ""; echo +512M; echo n; echo p; echo 2; echo ""; echo +20G; echo n; echo p; echo 3; echo ""; echo ""; echo t; echo 2; echo 82; echo a; echo 1; echo w; echo q) | fdisk ${disco}
	fdisk -l ${disco} > /tmp/partition
	cat /tmp/partition
	sleep 3
	partition="$(cat /tmp/partition | grep /dev/ | awk '{if (NR!=1) {print}}' | sed 's/*//g' | awk -F ' ' '{print $1}')"
	echo $partition | awk -F ' ' '{print $1}' >  boot-bios
	echo $partition | awk -F ' ' '{print $2}' >  swap-bios
	echo $partition | awk -F ' ' '{print $3}' >  root-bios

	clear
	printf '%*s\n' "${COLUMNS:-$(tput cols)}" '' | tr ' ' _
	echo "Partición BOOT es:" 
	cat boot-bios
	echo ""
	echo "Partición SWAP es:"
	cat swap-bios
	echo ""
	echo "Partición ROOT es:"
	cat root-bios
	sleep 3
	clear
	echo ""
	echo "Formateando Particiones"
	echo ""
	mkfs.ext4 $(cat root-bios) 
	mount $(cat root-bios) /mnt 

	mkdir -p /mnt/boot
	mkfs.ext4 $(cat boot-bios) 
	mount $(cat boot-bios) /mnt/boot

	mkswap $(cat swap-bios) 
	swapon $(cat swap-bios)
	clear
	lsblk -l
	sleep 3
	clear
	
fi
# FINAL METODO BIOS
print_live "\n\t\t\t  ACTUALIZACION DE LLAVES DEL LIVE CD"
clear
pacman -Syy archlinux-keyring reflector python rsync glibc curl --needed --noconfirm
sleep 2
clear
print_live "\n\t\t\t MIRRORLIST MAS RAPIDOS PARA EL LIVE CD"
reflector --verbose --latest 5 --protocol http --protocol https --sort rate --save /etc/pacman.d/mirrorlist
clear
cat /etc/pacman.d/mirrorlist
sleep 3
clear
print_live "\n\t\t\t DESCARGA SIMULTANEA PARA EL LIVE CD"
sed -i 's/#ParallelDownloads = 5/ParallelDownloads = 16/g' /etc/pacman.conf
echo ""
print_disco "\n\t\t\t INSTALANDO SISTEMA BASE EN NUESTRO DISCO"
echo ""
pacstrap /mnt base man-db base-devel xz linux-lts linux-firmware linux-headers util-linux tar systemd-sysvcompat systemd shadow psmisc procps-ng pciutils licenses iputils iproute2 glibc gcc-libs filesystem coreutils bzip2 bash reflector python rsync  
clear
print_disco "\n\t\t\t CREANDO ARCHIVO FSTAB"
echo ""
genfstab -p /mnt >> /mnt/etc/fstab
cat /mnt/etc/fstab
sleep 2
clear
print_disco "\n\t\t\t ILOVECANDY Y REPO MULTILIB EN PACMAN.CONF"
sed -i 's/#Color/Color/g' /mnt/etc/pacman.conf
sed -i 's/#TotalDownload/TotalDownload/g' /mnt/etc/pacman.conf
sed -i 's/#VerbosePkgLists/VerbosePkgLists/g' /mnt/etc/pacman.conf
sed -i "37i ILoveCandy" /mnt/etc/pacman.conf
sed -i 's/#ParallelDownloads = 5/ParallelDownloads = 16/g' /mnt/etc/pacman.conf
#sed -i 's/#\[multilib\]/\[multilib\]/g' /mnt/etc/pacman.conf
clear
print_disco "\n\t\t\t  HOSTNAME Y HOSTS"
#read -p "Elija Nombre De Hostname: " hos
hos=lenox
echo "$hos" > /mnt/etc/hostname
echo "127.0.1.1 $hos.localdomain $hos" > /mnt/etc/hosts
clear
echo "Hostname: $(cat /mnt/etc/hostname)"
echo ""
echo "Hosts: $(cat /mnt/etc/hosts)"
sleep 2
clear
print_disco "\n\t\t\t CREANDO USUARIO, ROOT Y SUS PASSWORDS"
arch-chroot /mnt /bin/bash -c "(echo $rootpasswd ; echo $rootpasswd) | passwd root"
arch-chroot /mnt /bin/bash -c "useradd -mU -s /bin/zsh $user"
arch-chroot /mnt /bin/bash -c "(echo $userpasswd ; echo $userpasswd) | passwd $user"
sed -i "80i $user ALL=(ALL) ALL"  /mnt/etc/sudoers
clear
print_disco "\n\t\t\t IDIOMA DEL SISTEMA DEL DISCO FISICO"

printf '%*s\n' "${COLUMNS:-$(tput cols)}" '' | tr ' ' _
echo -e ""
echo "$idioma UTF-8" > /mnt/etc/locale.gen
arch-chroot /mnt /bin/bash -c "locale-gen"
echo "LANG=$idioma" > /mnt/etc/locale.conf
echo ""
cat /mnt/etc/locale.conf
echo ""
cat /mnt/etc/locale.gen
arch-chroot /mnt /bin/bash -c "export $(cat /mnt/etc/locale.conf)"
exportlang=$(echo "LANG=$idioma")
export $exportlang
# export LANG=$idioma
# locale-gen
arch-chroot /mnt /bin/bash -c "locale-gen"
clear
sleep 2
print_disco "\n\t\t\t ZONA HORARIA AUTOMATICA"
zonahoraria="America/Argentina/Buenos_Aires"
arch-chroot /mnt /bin/bash -c "ln -sf /usr/share/zoneinfo/$zonahoraria /etc/localtime"
arch-chroot /mnt /bin/bash -c "timedatectl set-timezone $zonahoraria"
arch-chroot /mnt /bin/bash -c "pacman -S ntp --needed --noconfirm"
arch-chroot /mnt /bin/bash -c "ntpd -qg"
arch-chroot /mnt /bin/bash -c "hwclock --systohc"
clear
print_disco "\n\t\t\t MAPA DE TECLADO PARA LA TERMINAL VIRTUAL"
keymap="es"
echo "KEYMAP=$keymap" > /mnt/etc/vconsole.conf
cat /mnt/etc/vconsole.conf
sleep 2
clear
print_disco "\n\t\t\t ACTUALIZANDO LISTA DE MIRRORS EN TU DISCO FISICO"
echo ""
arch-chroot /mnt /bin/bash -c "reflector --verbose --latest 5 --protocol http --protocol https --sort rate --save /etc/pacman.d/mirrorlist"
clear
cat /mnt/etc/pacman.d/mirrorlist
sleep 3
clear
print_disco "\n\t\t\t INSTALACION DEL KERNEL ESTABLE"
arch-chroot /mnt /bin/bash -c "pacman -S linux-firmware linux-lts linux-headers mkinitcpio --needed --noconfirm"
clear

# GRUB UEFI O EFI
print_disco "\n\t\t\t INSTALACION DE ARRANQUE GRUB"
if [ $uefi == 1 ]
then
sleep 2
clear
arch-chroot /mnt /bin/bash -c "pacman -S grub efibootmgr dosfstools --noconfirm --needed" # Agregar os-prober para que reconozca una instalacion de windows
echo '' 
echo 'Instalando EFI System >> bootx64.efi' 
arch-chroot /mnt /bin/bash -c 'grub-install --target=x86_64-efi --efi-directory=/efi --removable' 
echo '' 
echo 'Instalando UEFI System >> grubx64.efi' 
arch-chroot /mnt /bin/bash -c 'grub-install --target=x86_64-efi --efi-directory=/efi --bootloader-id=Arch'
sed -i "6iGRUB_CMDLINE_LINUX_DEFAULT="loglevel=3"" /mnt/etc/default/grub
sed -i '7d' /mnt/etc/default/grub
arch-chroot /mnt /bin/bash -c "grub-mkconfig -o /boot/grub/grub.cfg"
echo '' 
ls -l /mnt/efi 
sleep 3
else
    
# GRUB PARA BIOS
clear
arch-chroot /mnt /bin/bash -c "pacman -S grub --noconfirm --needed"
#arch-chroot /mnt /bin/bash -c "pacman -S grub os-prober --noconfirm --needed"
echo '' 
arch-chroot /mnt /bin/bash -c "grub-install --target=i386-pc $disco"
sed -i "6iGRUB_CMDLINE_LINUX_DEFAULT="loglevel=3"" /mnt/etc/default/grub
sed -i '7d' /mnt/etc/default/grub
echo ''
arch-chroot /mnt /bin/bash -c "grub-mkconfig -o /boot/grub/grub.cfg"
echo '' 
ls -l /mnt/boot 
fi
clear

print_disco "\n\t\t\t INSTALANDO PROGRAMAS PARA ETHERNET"
arch-chroot /mnt /bin/bash -c "pacman -S dhcpcd networkmanager net-tools ifplugd --noconfirm" # Para Internet Wireless Daemon agregar iwd 
arch-chroot /mnt /bin/bash -c "systemctl enable dhcpcd NetworkManager"
echo "noipv6rs" >> /mnt/etc/dhcpcd.conf
echo "noipv6" >> /mnt/etc/dhcpcd.conf
clear
#echo -e '\033[1;92m' "\n\t\t\t INSTALANDO PROGRAMAS PARA WIFI"
#arch-chroot /mnt /bin/bash -c "pacman -S iw wireless_tools wpa_supplicant dialog wireless-regdb --noconfirm"

#echo -e '\033[1;92m' "\n\t\t\t INSTALANDO PROGRAMAS PARA BLUETOOTH"
#arch-chroot /mnt /bin/bash -c "pacman -S bluez bluez-utils pulseaudio-bluetooth"

print_disco "\n\t\t\t SHELL ZSH PARA USUARIO Y ROOT"
arch-chroot /mnt /bin/bash -c "chsh -s /usr/bin/zsh root"
arch-chroot /mnt /bin/bash -c "chsh -s /bin/zsh $user"
clear
echo -e '\033[0;36m' "\n\t\t\t INSTALANDO DRIVER DE VIDEO NVIDIA"
if (lspci | grep VGA | grep "NVIDIA\|nVidia" &>/dev/null); then
arch-chroot /mnt /bin/bash -c "pacman -S xf86-video-nouveau mesa lib32-mesa mesa-vdpau libva-mesa-driver lib32-mesa-vdpau lib32-libva-mesa-driver libva-vdpau-driver libvdpau-va-gl libva-utils vdpauinfo libvdpau lib32-libvdpau opencl-mesa clinfo ocl-icd lib32-ocl-icd opencl-headers --noconfirm"

echo -e '\033[0;36m' "\n\t\t\t INSTALANDO DRIVER DE VIDEO RADEON"
elif (lspci | grep VGA | grep "Radeon R\|R2/R3/R4/R5" &>/dev/null); then
arch-chroot /mnt /bin/bash -c "pacman -S xf86-video-amdgpu mesa lib32-mesa vulkan-radeon lib32-vulkan-radeon mesa-vdpau libva-mesa-driver lib32-mesa-vdpau lib32-libva-mesa-driver libva-vdpau-driver libvdpau-va-gl libva-utils vdpauinfo opencl-mesa clinfo ocl-icd lib32-ocl-icd opencl-headers --noconfirm"

echo -e '\033[0;36m' "\n\t\t\t INSTALANDO DRIVER DE VIDEO ATI"
elif (lspci | grep VGA | grep "ATI\|AMD/ATI" &>/dev/null); then
arch-chroot /mnt /bin/bash -c "pacman -S xf86-video-amdgpu xf86-video-ati mesa lib32-mesa mesa-vdpau libva-mesa-driver lib32-mesa-vdpau lib32-libva-mesa-driver libva-vdpau-driver libvdpau-va-gl libva-utils vdpauinfo opencl-mesa clinfo ocl-icd lib32-ocl-icd opencl-headers --noconfirm"

elif (lspci | grep VGA | grep "Intel" &>/dev/null); then
echo -e '\033[0;36m' "\n\t\t\t INSTALANDO DRIVER DE VIDEO INTEL"
arch-chroot /mnt /bin/bash -c "pacman -S xf86-video-intel vulkan-intel mesa lib32-mesa intel-media-driver libva-intel-driver libva-vdpau-driver libvdpau-va-gl libva-utils vdpauinfo intel-compute-runtime beignet clinfo ocl-icd lib32-ocl-icd opencl-headers --noconfirm"
    
else
echo -e '\033[0;36m' "\n\t\t\t INSTALANDO DRIVER DE VIDEO GENERICO"
arch-chroot /mnt /bin/bash -c "pacman -S xf86-video-vesa xf86-video-fbdev mesa mesa-libgl lib32-mesa --noconfirm"
fi
clear
print_disco "\n\t\t\t ESCRITORIO SELECCIONADO"
case $escritorio in
  1)
    echo "Escritorio : Terminal Virtual (TTY)"
    sleep 3
    clear
packages=(
    "zsh zsh-completions zsh-syntax-highlighting zsh-autosuggestions"
    "xorg xorg-apps xorg-xinit xorg-twm xterm xorg-xclock"
    "bat vifm fzf tmux xclip lsd bat pacman-contrib"
)

for package in "${packages[@]}"; do
    print_disco "\n\t\t\t INSTALANDO $package"
    arch-chroot /mnt /bin/bash -c "pacman -S --needed --noconfirm $package"
done
    sleep 3
    clear
  ;;

  2)
    echo "Escritorio : Bspwm"
    sleep 3
    clear
packages=(
    "firefox zsh-completions zsh-syntax-highlighting zsh-autosuggestions"
    "flameshot bat vifm fzf tmux xclip file-roller lsd rofi bspwm sxhkd gvfs picom"
    "xorg xorg-apps xorg-xinit xorg-twm xterm xorg-xclock i3lock xed"
    "android-file-transfer android-tools android-udev feh pacman-contrib" 
    "gvfs-gphoto2 gvfs-mtp mtpfs libnotify dunst pulseaudio"
    "pcmanfm lxappearance zathura zathura-pdf-poppler imagemagick"
)

for package in "${packages[@]}"; do
    print_disco "\n\t\t\t INSTALANDO $package"
    arch-chroot /mnt /bin/bash -c "pacman -S --needed --noconfirm $package"
# AGREGAR SI NECESITA EN EL BUCLE ntfs-3g bash-completion gtk-engine-murrine gnome-themes-extra pavucontrol galculator
# discord arc-gtk-theme ranger libreoffice-fresh libreoffice-fresh-es ark cmus mpv 
done
    clear
  ;;

  3)
    echo "Escritorio : Xfce4"
     sleep 3

packages=(
    # INSTALA XORG PROGRAMAS PARA XFCE4 Y LOGIN
    "firefox xorg xorg-twm xorg-apps xorg-xinit xorg-apps xterm xorg-xclock lightdm lightdm-gtk-greeter lightdm-gtk-greeter-settings"
    "accountsservice light-locker tmux xfce4 xfce4-goodies flameshot network-manager-applet ffmpegthumbnailer ffmpegthumbs" 
)

for package in "${packages[@]}"; do
    print_disco "\n\t\t\t INSTALANDO $package"
    arch-chroot /mnt /bin/bash -c "pacman -S --needed --noconfirm $package"
done
	arch-chroot /mnt /bin/bash -c "systemctl enable lightdm"
    clear
	# ESTABLECER FORMATO DE TECLADO DENTRO DE XORG
	keymap="es"

cat <<EOF > /mnt/etc/X11/xorg.conf.d/00-keyboard.conf
Section "InputClass"
    Identifier "system-keyboard"
    MatchIsKeyboard "on"
    Option "XkbLayout" "latam"
EndSection
EOF
    echo ""
    cat /mnt/etc/X11/xorg.conf.d/00-keyboard.conf
	sleep 5
	clear

#packages=(
# FORMATOS DE LECTURA DE TODOS LOS TIPOS DE DISCOS INCLUIDO ANDROID
#  "gvfs-gphoto2 gvfs-smb gvfs-afc gvfs libcddb libmtp msmtp android-udev android-tools android-file-transfer" 
#  "reiserfsprogs ntfs-3g exfat-utils btrfs-progs f2fs-tools jfsutils dosfstools gvfs-google gvfs-nfs gvfs-goa gvfs-mtp"
#  "mtools gpart polkit nilfs-utils xfsprogs udftools"

#for package in "${packages[@]}"; do
#    print_disco "\n\t\t\t INSTALANDO $package"
#    arch-chroot /mnt /bin/bash -c "pacman -S --needed --noconfirm $package"
#done
	#clear

packages=(
	# AUDIO FIREFOX FONTS
  "firefox pavucontrol pulseaudio gnu-free-fonts ttf-hack ttf-inconsolata gnome-font-viewer"
)

for package in "${packages[@]}"; do
    print_disco "\n\t\t\t INSTALANDO $package"
    arch-chroot /mnt /bin/bash -c "pacman -S --needed --noconfirm $package"
done
	clear

  ;;

  4)
    echo "Escritorio : Kde Plasma"
    sleep 3

packages=(
    # INSTALA XORG PROGRAMAS PARA KDE PLASMA MINIMALISTA
  "xorg xorg-apps xorg-xinit xorg-twm xterm xorg-xclock" 
  "plasma dolphin konsole discover sddm ffmpegthumbs ffmpegthumbnailer"
)

for package in "${packages[@]}"; do
    print_disco "\n\t\t\t INSTALANDO $package"
    arch-chroot /mnt /bin/bash -c "pacman -S --needed --noconfirm $package"
done

    arch-chroot /mnt /bin/bash -c "systemctl enable sddm"

    # ESTABLECER FORMATO DE TECLADO DENTRO DE XORG
	keymap="es"

cat <<EOF > /mnt/etc/X11/xorg.conf.d/00-keyboard.conf
Section "InputClass"
    Identifier "system-keyboard"
    MatchIsKeyboard "on"
    Option "XkbLayout" "latam"
EndSection
EOF
    echo ""
    cat /mnt/etc/X11/xorg.conf.d/00-keyboard.conf
	sleep 5
	clear
#packages=(
# FORMATOS DE LECTURA DE TODOS LOS TIPOS DE DISCOS INCLUIDO ANDROID
#  "gvfs-gphoto2 gvfs-smb gvfs-afc gvfs libcddb libmtp msmtp android-udev android-tools android-file-transfer" 
#  "reiserfsprogs ntfs-3g exfat-utils btrfs-progs f2fs-tools jfsutils dosfstools gvfs-google gvfs-nfs gvfs-goa gvfs-mtp"
#  "mtools gpart polkit nilfs-utils xfsprogs udftools"
#)

#for package in "${packages[@]}"; do
#    print_disco "\n\t\t\t INSTALANDO $package"
#    arch-chroot /mnt /bin/bash -c "pacman -S --needed --noconfirm $package"
#done
	#clear

packages=(
	# AUDIO FIREFOX FONTS
  "firefox gnome-font-viewer ttf-inconsolata gnu-free-fonts ttf-hack pavucontrol pulseaudio"
)

for package in "${packages[@]}"; do
    print_disco "\n\t\t\t INSTALANDO $package"
    arch-chroot /mnt /bin/bash -c "pacman -S --needed --noconfirm $package"
done
	clear

  ;;

  5)
    echo "Escritorio : Gnome 40"
    sleep 3

packages=(
    # INSTALA XORG PROGRAMAS PARA GNOME MINIMALISTA
  "firefox xorg xorg-apps xorg-xinit xorg-twm xterm xorg-xclock gnome-font-viewer gnome-terminal"
  "gnome-shell gdm gnome-control-center gnome-tweaks pavucontrol ttf-hack ttf-inconsolata nautilus"
)

for package in "${packages[@]}"; do
    print_disco "\n\t\t\t INSTALANDO $package"
    arch-chroot /mnt /bin/bash -c "pacman -S --needed --noconfirm $package"
done
    arch-chroot /mnt /bin/bash -c "systemctl enable gdm"

    # ESTABLECER FORMATO DE TECLADO DENTRO DE XORG
	keymap="es"

cat <<EOF > /mnt/etc/X11/xorg.conf.d/00-keyboard.conf
Section "InputClass"
    Identifier "system-keyboard"
    MatchIsKeyboard "on"
    Option "XkbLayout" "latam"
EndSection
EOF
    echo ""
    cat /mnt/etc/X11/xorg.conf.d/00-keyboard.conf
	sleep 5
	clear
#packages=(
# FORMATOS DE LECTURA DE TODOS LOS TIPOS DE DISCOS INCLUIDO ANDROID
#  "gvfs-gphoto2 gvfs-smb gvfs-afc gvfs libcddb libmtp msmtp android-udev android-tools android-file-transfer" 
#  "reiserfsprogs ntfs-3g exfat-utils btrfs-progs f2fs-tools jfsutils dosfstools gvfs-google gvfs-nfs gvfs-goa gvfs-mtp"
#  "mtools gpart polkit nilfs-utils xfsprogs udftools"
#)

#for package in "${packages[@]}"; do
#    print_disco "\n\t\t\t INSTALANDO $package"
#    arch-chroot /mnt /bin/bash -c "pacman -S --needed --noconfirm $package"
#done
	#clear

packages=(
	# AUDIO FIREFOX FONTS
  "firefox gnu-free-fonts ttf-inconsolata ttf-hack gnome-font-viewer pavucontrol pulseaudio"
)

for package in "${packages[@]}"; do
    print_disco "\n\t\t\t INSTALANDO $package"
    arch-chroot /mnt /bin/bash -c "pacman -S --needed --noconfirm $package"
done
	clear
  ;;
 
  6)
    echo -e '\033[0;34m' "Escritorio : I3"
    sleep 3
packages=(
    "firefox i3-gaps i3-wm i3blocks i3lock zsh-completions zsh-syntax-highlighting zsh-autosuggestions imagemagick pulseaudio"
    "flameshot xorg xorg-apps xorg-xinit xorg-twm xterm xorg-xclock bat vifm fzf tmux xclip file-roller dunst lsd"
    "rofi gvfs picom pcmanfm lxappearance libnotify zathura zathura-pdf-poppler i3lock xed feh pacman-contrib"
)

for package in "${packages[@]}"; do
    print_disco "\n\t\t\t INSTALANDO $package"
    arch-chroot /mnt /bin/bash -c "pacman -S --needed --noconfirm $package"
done
    clear
  ;;
 
  7)
    echo -e '\033[0;34m' "Escritorio : wayland"
    sleep 3
packages=(
"firefox slurp hyprland hyprpaper zsh-completions zsh-syntax-highlighting zsh-autosuggestions pulseaudio"
"nwg-look wayland wlroots xorg-xrdb xorg-xwayland xterm bat vifm rofi fzf tmux xclip file-roller"
"lsd gvfs pcmanfm zathura zathura-pdf-poppler xed feh pacman-contrib imagemagick libnotify dunst "
)

for package in "${packages[@]}"; do
    print_disco "\n\t\t\t INSTALANDO $package"
    arch-chroot /mnt /bin/bash -c "pacman -S --needed --noconfirm $package"
done
    clear

  ;;
 
  *)
    echo "¡Incorrecto! por defecto se instalará Terminal Virtual (TTY)"
  ;;
esac
echo -e '\033[1;95m' "\n\t\t\t CLONANDO REPO EN HOME DEL DISCO"
arch-chroot /mnt /bin/bash -c "git clone -b hypr https://github.com/zafnet/wmarch /home/$user/wmarch"
sleep 2
clear
echo -e '\033[1;95m' "\n\t\t\t CAMBIANDO PERMISOS PARA REPO EN HOME DEL DISCO"
arch-chroot /mnt /bin/bash -c "chown -R $user:$user /home/$user/wmarch/"
sleep 2
clear
echo -e '\033[1;95m' "\n\t\t\t CAMBIANDO PERMISOS PARA DOTS EN DISCO"
arch-chroot /mnt /bin/bash -c "chmod 744 /home/$user/wmarch/dots"
sleep 2
clear
echo -e '\033[1;91m' "\n\t\t\t DESMONTANDO PARTICIONES"
umount -R /mnt
sleep 2
clear
#echo -e '\033[1;95m' "\n\t\t\t REINICIANDO EL SISTEMA"
#reboot
